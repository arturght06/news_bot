from create_bot import bot, dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from keyboard import greet_key, brcs_key, admin_key
# from api import count_from_api
import datetime as DT
from time import sleep
import xlsxwriter

async def admin_start(message: types.Message):
	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω —É–≤—ñ–π—à–æ–≤ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>')
	await FSMcreate.admin_panel.set()
	await bot.send_message(chat_id = message.from_user.id, text = "–í—ñ—Ç–∞—éüëã\n–¶–µ –∑—Ä—É—á–Ω–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –≤ —è–∫—ñ–π —Ç–∏ –º–æ–∂–µ—à –∫–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n<b>\"–î–æ–¥–∞—Ç–∏\"</b><i> - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</i>\n<b>\"–í–∏–¥–∞–ª–∏—Ç–∏\"</b><i> - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–¥</i>\n<b>\"–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ñ–æ\"</b><i> - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á</i>–∞\n<b>\"–°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤\"</b><i> - –í–∏–≤–æ–¥–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</i>\n\n–£—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∏–∂—á–µüòâ" , reply_markup=admin_key)

async def back(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	elif str(current_state) in ["FSMcreate:add_user", "FSMcreate:del_user", "FSMcreate:check_user", "FSMcreate:delete_price", "FSMcreate:add_price", "FSMcreate:tbmain", "FSMcreate:send_all_main"]:
		await FSMcreate.admin_panel.set()
		await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=admin_key)
		return
	else:
		await state.finish()
		await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=greet_key)
		return

def register_handlers_create(dp: Dispatcher):
    dp.register_message_handler(back, state='*', commands=['–ù–∞–∑–∞–¥'])
    dp.register_message_handler(back, Text(equals='–Ω–∞–∑–∞–¥', ignore_case=True), state='*')